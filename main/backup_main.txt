/*
 * SPDX-FileCopyrightText: 2021-2022 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Unlicense OR CC0-1.0
 */

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"
#include "esp_log.h"
#include "driver/rmt_rx.h"
#include <string.h>


#define EXAMPLE_IR_RESOLUTION_HZ     40*1000000 // 1MHz resolution, 1 tick = 1us

#define EXAMPLE_IR_RX_GPIO_NUM       14


static const char *TAG = "example";

/**
 * @brief Divide with 4 dump 5 keep
 */

static uint16_t divide_4d_5k(uint16_t devided, uint16_t divider){
    int result = devided / divider;
    if (2 * (devided % divider) >= divider) {
        result += 1;
    }
    return result;
}

typedef struct {
    uint16_t value_p0;
    uint16_t value_p1;
    uint16_t value_p2;
    uint16_t value_p3;
    uint16_t value_p4;
    uint16_t value_p5;
} Data;

/**
 * @brief Decode RMT symbols into SENT scan code and print the result
 */
static void example_parse_SENT_frame(rmt_symbol_word_t *rmt_SENT_symbols, size_t symbol_num)
{   
    static uint16_t tick = 119;

    static uint16_t duration_P0 = 0;
    static uint16_t duration_P1 = 0;
    static uint16_t duration_P2 = 0;
    static uint16_t duration_P3 = 0;
    // static uint16_t duration_P4 = 0;
    // static uint16_t duration_P5 = 0;
    static uint16_t VALUE_P0 = 0;
    static uint16_t VALUE_P1 = 0;
    static uint16_t VALUE_P2 = 0;
    static uint16_t VALUE_P3 = 0;
    // static uint16_t VALUE_P4 = 0;
    // static uint16_t VALUE_P5 = 0;
    // printf("SENT frame start---\r\n");
    // printf("%d",symbol_num);

    if(symbol_num == 9){
        duration_P0 = rmt_SENT_symbols[0].duration0 + rmt_SENT_symbols[0].duration1;
        duration_P1 = rmt_SENT_symbols[1].duration0 + rmt_SENT_symbols[1].duration1;
        duration_P2 = rmt_SENT_symbols[2].duration0 + rmt_SENT_symbols[2].duration1;
        duration_P3 = rmt_SENT_symbols[3].duration0 + rmt_SENT_symbols[3].duration1;
        // duration_P4 = rmt_SENT_symbols[4].duration0 + rmt_SENT_symbols[4].duration1;
        // duration_P5 = rmt_SENT_symbols[5].duration0 + rmt_SENT_symbols[5].duration1;
        
        VALUE_P0 = divide_4d_5k(duration_P0, tick) - 12;
        VALUE_P1 = divide_4d_5k(duration_P1, tick) - 12;
        VALUE_P2 = divide_4d_5k(duration_P2, tick) - 12;
        VALUE_P3 = divide_4d_5k(duration_P3, tick) - 12;
        // VALUE_P4 = divide_4d_5k(duration_P4, tick) - 12;
        // VALUE_P5 = divide_4d_5k(duration_P5, tick) - 12;

        // Data data = {VALUE_P0, VALUE_P1, VALUE_P2, VALUE_P3, VALUE_P4, VALUE_P5}; 
        // uint8_t buffer[sizeof(data)];
        // memcpy(buffer, &data, sizeof(data));

        // printf("%X%X%X%X%X%X ", VALUE_P0, VALUE_P1, VALUE_P2, VALUE_P3,  VALUE_P4, VALUE_P5);
        printf("%X%X%X%X ", VALUE_P0, VALUE_P1, VALUE_P2, VALUE_P3);
        // printf("%X%X ", VALUE_P4, VALUE_P5);
    // }
    
    // for (size_t i = 0; i < symbol_num; i++) {
        // printf("{%d:%d},{%d:%d}\r\n", rmt_SENT_symbols[i].level0, rmt_SENT_symbols[i].duration0,
        //        rmt_SENT_symbols[i].level1, rmt_SENT_symbols[i].duration1);
    }
    // printf("---SENT frame end: \n");
    
}

static bool example_rmt_rx_done_callback(rmt_channel_handle_t channel, const rmt_rx_done_event_data_t *edata, void *user_data)
{
    BaseType_t high_task_wakeup = pdFALSE;
    QueueHandle_t receive_queue = (QueueHandle_t)user_data;
    // send the received RMT symbols to the parser task
    xQueueSendFromISR(receive_queue, edata, &high_task_wakeup);
    return high_task_wakeup == pdTRUE;
}

void app_main(void)
{
    ESP_LOGI(TAG, "create RMT RX channel");
    rmt_rx_channel_config_t rx_channel_cfg = {
        .clk_src = RMT_CLK_SRC_DEFAULT,
        .resolution_hz = EXAMPLE_IR_RESOLUTION_HZ,
        .mem_block_symbols = 512, // amount of RMT symbols that the channel can store at a time
        .gpio_num = EXAMPLE_IR_RX_GPIO_NUM,
        .flags.with_dma = false,
    };
    rmt_channel_handle_t rx_channel = NULL;
    ESP_ERROR_CHECK(rmt_new_rx_channel(&rx_channel_cfg, &rx_channel));

    ESP_LOGI(TAG, "register RX done callback");
    QueueHandle_t receive_queue = xQueueCreate(1, sizeof(rmt_rx_done_event_data_t));
    assert(receive_queue);
    rmt_rx_event_callbacks_t cbs = {
        .on_recv_done = example_rmt_rx_done_callback,
    };
    ESP_ERROR_CHECK(rmt_rx_register_event_callbacks(rx_channel, &cbs, receive_queue));

    // the following timing requirement is based on SENT protocol
    rmt_receive_config_t receive_config = {
        .signal_range_min_ns = 2*1000,     // the shortest duration for SENT signal is 36us, 30us < 36us, valid signal won't be treated as noise
        .signal_range_max_ns = 83*1000, // the longest duration for SENT signal is 81us, 100us > 81us, the receive won't stop early
    };




    ESP_LOGI(TAG, "enable RMT RX channels");
    ESP_ERROR_CHECK(rmt_enable(rx_channel));

    // save the received RMT symbols
    rmt_symbol_word_t raw_symbols[512]; // 64 symbols should be sufficient for a standard SENT frame
    rmt_rx_done_event_data_t rx_data;
    // ready to receive
    ESP_ERROR_CHECK(rmt_receive(rx_channel, raw_symbols, sizeof(raw_symbols), &receive_config));
    while (1) {
        // wait for RX done signal
        if (xQueueReceive(receive_queue, &rx_data, pdMS_TO_TICKS(30)) == pdPASS) {

            // start receive again
            rmt_receive(rx_channel, raw_symbols, sizeof(raw_symbols), &receive_config);

            // parse the receive symbols and print the result
            example_parse_SENT_frame(rx_data.received_symbols, rx_data.num_symbols);
        } 
    }
}